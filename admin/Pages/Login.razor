@page "/"
@page "/login"

@layout EmptyLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@using System.Text.RegularExpressions;
@using System.Text;

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    string name = "";
    string pass = "";
    string email = "mail";
    string message = "";

    string f_username = "";
    bool DivDisabled = true;
    string username = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authenticationState = await AuthenticationStateTask;
            // ako je logiran
            if (authenticationState.User.Identity.IsAuthenticated)
            {
                await Perm.reseller_worker_perm();
                var getLng = await localStorage.GetItemAsync<string>("lng");
                // redirect to home
                //NavManager.NavigateTo("/dashboard/general");

                NavManager.NavigateTo(
           $"Culture/Set?culture={getLng}&redirectUri=/dashboard/general",
           forceLoad: true);

                //Navigation.NavigateTo("/dashboard/general", true);
            }
            else
            {
                // await localStorage.RemoveItemAsync("time");
                // await localStorage.RemoveItemAsync("guid");
                // await localStorage.RemoveItemAsync("name");
                // await localStorage.RemoveItemAsync("reseller_worker_type_id");
                // await localStorage.RemoveItemAsync("reseller_worker_id");

                bl.B2B.zaggy.shared.set_variables();
                bl.B2B.zaggy.shared.set_variables();

            }
        }
    }

    //protected override async Task OnInitializedAsync()
    //{

    //}

    #region passwords

    /// <summary>
    /// Forget password function
    /// </summary>
    void password_forget()
    {
        
    }

    /// <summary>
    /// create password for user
    /// </summary>
    /// <param name="length"></param>
    /// <returns></returns>
    public string create_password(int length)
    {
        const string valid = "!_$&+*abcdefghijklmnopqrstuvwxyz!#$%&ABCDEFGHIJKLMNOPQRSTUVWXYZ!#1234567890!_?$&#%=";
        StringBuilder res = new StringBuilder();
        Random rnd = new Random();
        while (0 < length--)
        {
            res.Append(valid[rnd.Next(valid.Length)]);
        }
        return res.ToString();
    }

    /// <summary>
    /// show div for password
    /// </summary>
    void password_div_display()
    {
        if (DivDisabled)
        {
            DivDisabled = false;
        }
        else
        {
            DivDisabled = true;
        }
    }

    #endregion

    bool IsValidEmail(string email)
    {
        return Regex.IsMatch(email, @"^[\w!#$%&'*+\-/=?\^_`{|}~]+(\.[\w!#$%&'*+\-/=?\^_`{|}~]+)*@((([\-\w]+\.)+[a-zA-Z]{2,4})|(([0-9]{1,3}\.){3}[0-9]{1,3}))\z");
    }

    private async Task<bool> login()
    {
        string guid = "";

        name = name.db_quoteless();
        pass = pass.db_quoteless();

        if (string.IsNullOrEmpty(name) == false && string.IsNullOrEmpty(pass) == false)
        {
            guid = bl.B2B.zaggy.resellers_workers.get_guid(name, pass);
        }

        if (guid != "")
        {
            string id_hash_pass = bl.B2B.zaggy.resellers_workers.get_change_pass(name, pass);

            if (id_hash_pass != "")
            {
                NavManager.NavigateTo("/forgotten_password/" + id_hash_pass);
            }
            else
            {
                ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(name, guid);

                var ip_remote = "";
                //upisuje u session
                var name_crypt = AesOperation.EncryptString(bl.B2B.zaggy.shared.key, name);
                await localStorage.SetItemAsStringAsync("guid", guid);
                await localStorage.SetItemAsStringAsync("name", name_crypt);

                var ip = httpContextAccessor.HttpContext != null ? httpContextAccessor.HttpContext.Request.Host.Value.ToString() : "::1";
                var connection_id = httpContextAccessor.HttpContext.Connection.Id;
                //var ip_remote = httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString();
                var Features = httpContextAccessor.HttpContext.Features;
                var HttpContext = httpContextAccessor.HttpContext;
                var user_agent = httpContextAccessor.HttpContext.Request.Headers.UserAgent.ToString();


                // get worker
                var reseller_worker = bl.resellers_workers.get_reseller_by_guid(guid).Rows[0];

                var reseller_worker_id = reseller_worker["id"].ToString();
                var reseller_worker_guid = reseller_worker["guid"].ToString();
                var reseller_id = reseller_worker["reseller_id"].ToString();
                var resellers_workers_types_name = reseller_worker["resellers_workers_types_name"].ToString();
                var reseller_worker_type_id = reseller_worker["reseller_worker_type_id"].ToString();
                var user_perm_str = reseller_worker["permissions"].ToString();

                // store worker promisions
                await localStorage.SetItemAsStringAsync("reseller_worker_perm", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, user_perm_str));

                // stre worker type
                await localStorage.SetItemAsStringAsync("resellers_workers_types_name", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, resellers_workers_types_name));
                await localStorage.SetItemAsStringAsync("reseller_worker_type_id", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, reseller_worker_type_id));

                // save reseller_worker_id
                await localStorage.SetItemAsStringAsync("reseller_worker_id", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, reseller_worker_id));
                await localStorage.SetItemAsStringAsync("reseller_worker_guid", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, reseller_worker_guid));

                // track time when user was login
                await localStorage.SetItemAsStringAsync("time", AesOperation.EncryptString(bl.B2B.zaggy.shared.key, System.DateTime.Now.ToString()));

                try
                {
                    ip_remote = await js.InvokeAsync<string>("getIpAddress");

                    //ip_remote = "..2";
                }
                catch (Exception e)
                {
                    var a = e.Message;
                    ip_remote = "..2";
                }

                var j = new
                {
                    reseller_worker_id,
                    reseller_id,
                    ip_remote,
                    user_agent,
                    connection_id
                };

                var json = j.json();

                try
                {
                    //logiranje korisnika
                    bl.log_resellers_login.add(json);
                }
                catch (System.Exception ex)
                {
                    var a = ex.Message;
                }

                var getLng = await localStorage.GetItemAsync<string>("lng");
                // redirect to home
                //NavManager.NavigateTo("/dashboard/general");

                NavManager.NavigateTo(
           $"Culture/Set?culture={getLng}&redirectUri=/dashboard/general",
           forceLoad: true);
            }
        }
        else
        {
            name = "";
            pass = "";
            message = "Incorrect username or password";
            //NavManager.NavigateTo("/login");
        }

        return await Task.FromResult(true);
    }

    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await login();
        }
    }
}

<PageTitle> Login </PageTitle>

<style>
    .custom-shape-divider-bottom-1674140709 {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        overflow: hidden;
        line-height: 0;
    }

        .custom-shape-divider-bottom-1674140709 svg {
            position: relative;
            display: block;
            width: calc(108% + 1.3px);
            height: 93px;
        }

        .custom-shape-divider-bottom-1674140709 .shape-fill {
            fill: #163d73;
        }
</style>

<AuthorizeView>

    <Authorized>
        <div style="top: 0; left: 0;">
            <img class="me-2" src="/assets/images/zagreb_logo.png" style="width: 140px;">
        </div>
        <p><b>User: </b>@context.User.Identity.Name <i>redirect...</i></p>
    </Authorized>

    <NotAuthorized>

        <form>

            <!-- Email input -->
            <div class="row mb-3">

                <div class="col-md-5">
                </div>
                <div class="col-md-2 ">

                    <img class="mb-4 mt-5" src="/assets/images/zagreb_logo.png" style="width: 180px;" alt="" b-4vnwaycrv7="">

                    @if (!DivDisabled)
                    {
                        <div id="fpassDiv" class="form-outline mb-2">
                            <label> Please enter your <strong>zaggy username</strong>, to reset your password </label>
                            <input type="email" id="femail" @bind="f_username" @bind:event="oninput" placeholder="Enter email" class="form-control" />
                            <button type="button" id="Fsend" @onclick="password_forget" class="btn btn-primary btn-block mt-2"> I want to change password </button>
                        </div>
                    }
                    else
                    {

                        <div class="form-outline mb-2">
                            <label class="form-label" for="email">User name</label>
                            <input type="email" id="email" @bind="name" @onkeydown="@Enter" @bind:event="oninput" class="form-control" placeholder="username" />
                        </div>

                        <!-- Password input -->
                        <div class="form-outline mb-2">
                            <label class="form-label" for="psw">Password</label>
                            <input type="password" id="psw" @bind="pass" @onkeydown="@Enter" @bind:event="oninput" class="form-control" placeholder="password" />
                        </div>

                        <!-- Submit button -->
                        <div class="mt-2">
                            <button type="button" @onclick="login" class="btn btn-primary btn-block mb-4"> @lng.l.Log_in </button>
                        </div>
                    }

                    <hr />
                    <a @onclick="password_div_display" role="button" class=" mb-0"> Forgot Password? </a>

                    <div>@message</div>

                </div>
                <div class="col-md-5">
                </div>
            </div>
        </form>

    </NotAuthorized>
</AuthorizeView>


<div class="custom-shape-divider-bottom-1674140709">
    <svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
        <path d="M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z" class="shape-fill"></path>
    </svg>
</div>